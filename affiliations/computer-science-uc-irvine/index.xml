<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer Science, UC Irvine on</title><link>/affiliations/computer-science-uc-irvine/</link><description>Recent content in Computer Science, UC Irvine on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 07 Aug 2023 11:38:41 -0700</lastBuildDate><atom:link href="/affiliations/computer-science-uc-irvine/index.xml" rel="self" type="application/rss+xml"/><item><title>Enhancing the UDF Editor by Adding Language Server Support</title><link>/blog/enhancing-the-udf-editor-by-adding-language-server-support/</link><pubDate>Mon, 07 Aug 2023 11:38:41 -0700</pubDate><guid>/blog/enhancing-the-udf-editor-by-adding-language-server-support/</guid><description>Motivation # The user-defined function (UDF) operator in Texera plays an important role to allow developers to customize their workflows. The previous implementation of the code editor in the operator can only display the code as plain text (as shown in Figure 1), and it lacks many IDE-like features such as syntax checking and autocomplete. These limitations hinder the productivity of UDF developers. For instance, users often made syntax mistakes that were discovered only when they tried to execute the code.</description></item><item><title>Enhancing Attribute Autocomplete Functionality - Auto Correction and Type Validation</title><link>/blog/enhancing-attribute-autocomplete-functionality-auto-correction-and-type-validation/</link><pubDate>Fri, 07 Jul 2023 10:38:20 -0700</pubDate><guid>/blog/enhancing-attribute-autocomplete-functionality-auto-correction-and-type-validation/</guid><description>Background # What are operator properties # Texera workflows consist of operators. Every operator has properties as the parameters of its data-process function. For example, in Figure 1, the &amp;ldquo;Filter&amp;rdquo; operator has three properties, Attribute, Condition, and Value.
Some attribute properties accept input attribute names as values, usually describing the attributes that the operator applies. In this operator, Attribute is an attribute property, and price is the attribute to which the filter will apply.</description></item><item><title>Using Texera to Perform Single-cell RNA Sequencing Analysis with R Language</title><link>/blog/using-texera-to-perform-single-cell-rna-sequencing-analysis-with-r-language/</link><pubDate>Tue, 27 Jun 2023 14:26:21 -0700</pubDate><guid>/blog/using-texera-to-perform-single-cell-rna-sequencing-analysis-with-r-language/</guid><description>RNA sequence analysis has revolutionized our understanding of gene expression at the single-cell level, providing unprecedented insights into cellular heterogeneity and dynamics. Seurat, a popular R library, has emerged as a versatile toolkit for the comprehensive analysis of single-cell RNA sequencing (scRNA-seq) data.
While the core engine of Texera is built using Scala, it supports the integration of Python UDFs, allowing users to incorporate custom Python code directly into their data processing pipelines.</description></item><item><title>Improving Texera Operators to Simplify a Workflow from Alteryx</title><link>/blog/improving-texera-operators-to-simplify-a-workflow-from-alteryx/</link><pubDate>Wed, 14 Jun 2023 17:00:00 -0700</pubDate><guid>/blog/improving-texera-operators-to-simplify-a-workflow-from-alteryx/</guid><description>In this blog, we discuss how we extended Texera’s usability by providing more native support for certain advanced data analysis operations and demonstrate their benefits in a workflow migrated from Alteryx.
Texera offers a workflow operator called “Python UDF,” which enables users to specify any desired operator behavior that best suits their needs. It is a powerful tool that offers users high levels of control over their workflows. While this operator enables Texera to provide the same data processing capabilities as the Alteryx platform, it comes with the drawback of requiring users to code.</description></item><item><title>How We Built a Real-time Collaborative Workflow Editor in Texera</title><link>/blog/how-we-built-a-real-time-collaborative-workflow-editor-in-texera/</link><pubDate>Thu, 17 Nov 2022 14:27:42 +0100</pubDate><guid>/blog/how-we-built-a-real-time-collaborative-workflow-editor-in-texera/</guid><description>Real-time collaborative editing has been so popularized in recent years to the point that it has become almost a hidden standard for major document editing providers. Google Docs Editors, which includes Google Docs, Google Slides, etc., was a pioneer in real-time collaborative editing. Microsoft Office did not have real-time co-authoring capability until 2013, 7 years after the initial release of Google Docs Editors. Then came Overleaf, which has become the go-to place for co-editing LaTeX documents.</description></item><item><title>Showing Changes Between Two Workflow Versions</title><link>/blog/showing-changes-between-two-workflow-versions/</link><pubDate>Thu, 22 Sep 2022 15:16:36 -0700</pubDate><guid>/blog/showing-changes-between-two-workflow-versions/</guid><description>Texera has a version control system that automatically saves workflow versions so that users can easily view or restore early versions. The current implementation only shows each historical workflow. Users may find it hard to see how it differs from another workflow version, especially when there is only a tiny change. We want to improve the usability of the version control system by visually displaying the difference between two workflow versions.</description></item><item><title>Data Crawling Using Texera with Python User-Defined Functions</title><link>/blog/data-crawling-using-texera-with-python-user-defined-functions/</link><pubDate>Tue, 30 Aug 2022 09:19:42 +0100</pubDate><guid>/blog/data-crawling-using-texera-with-python-user-defined-functions/</guid><description>Crawling is a common yet important task to collect data from the Web. However, developing a good crawling pipeline is notoriously challenging due to the following reasons:
The content and format of the Web pages can be quite unpredictable. Many &amp;ldquo;edge cases&amp;rdquo; need to be covered by the crawler and the parser. Moreover, these edge cases can happen after the pipeline has been running for a long time. This could cause the parser to extract wrong information, or even crash the program.</description></item></channel></rss>