<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on</title><link>/blog/</link><description>Recent content in Blog on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:55 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>How We Built a Real-time Collaborative Workflow Editor in Texera</title><link>/blog/how-we-built-a-real-time-collaborative-workflow-editor-in-texera/</link><pubDate>Thu, 17 Nov 2022 14:27:42 +0100</pubDate><guid>/blog/how-we-built-a-real-time-collaborative-workflow-editor-in-texera/</guid><description>Real-time collaborative editing has been so popularized in recent years to the point that it has become almost a hidden standard for major document editing providers. Google Docs Editors, which includes Google Docs, Google Slides, etc., was a pioneer in real-time collaborative editing. Microsoft Office did not have real-time co-authoring capability until 2013, 7 years after the initial release of Google Docs Editors. Then came Overleaf, which has become the go-to place for co-editing LaTeX documents.</description></item><item><title>Showing Changes Between Two Workflow Versions</title><link>/blog/showing-changes-between-two-workflow-versions/</link><pubDate>Thu, 22 Sep 2022 15:16:36 -0700</pubDate><guid>/blog/showing-changes-between-two-workflow-versions/</guid><description>Texera has a version control system that automatically saves workflow versions so that users can easily view or restore early versions. The current implementation only shows each historical workflow. Users may find it hard to see how it differs from another workflow version, especially when there is only a tiny change. We want to improve the usability of the version control system by visually displaying the difference between two workflow versions.</description></item><item><title>Data Crawling Using Texera with Python User-Defined Functions</title><link>/blog/data-crawling-using-texera-with-python-user-defined-functions/</link><pubDate>Tue, 30 Aug 2022 09:19:42 +0100</pubDate><guid>/blog/data-crawling-using-texera-with-python-user-defined-functions/</guid><description>Crawling is a common yet important task to collect data from the Web. However, developing a good crawling pipeline is notoriously challenging due to the following reasons:
The content and format of the Web pages can be quite unpredictable. Many &amp;ldquo;edge cases&amp;rdquo; need to be covered by the crawler and the parser. Moreover, these edge cases can happen after the pipeline has been running for a long time. This could cause the parser to extract wrong information, or even crash the program.</description></item></channel></rss>